---
Source File Name: C:\code\pandp\git\markdown\sampleDocx\40-Logging.docx
AssetID: fdbd8e16-7753-4e92-9113-36f56f47ac79
Title: Configuring Trace Listeners
Order In ToC: 1-4-1-1-2
Output Filename: 1-4-1-1-2_Configuring Trace Listeners.markdown
---

#### Markdown Test ####
# Configuring Trace Listeners #
----------

Trace listeners receive log entries and write them to the appropriate destinations. To configure a trace listener programmatically, you instantiate a trace listener object, providing configuration data either as constructor parameters or as property values. Each trace listener has a different set of configurable properties: these are listed in the following tables.  
There are tables for the following trace listener classes:  
+ <a href="#_FormattedDatabaseTraceListener" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">FormattedDatabaseTraceListener</a>. This trace listener class writes formatted log entries to a database.
+ <a href="#_EmailTraceListener" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">EmailTraceListener</a>. This trace listener class sends log entries as e-mail messages.
+ <a href="#_FormattedEventLogTraceListener" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">FormattedEventLogTraceListener</a>. This trace listener class formats log entries and writes them to Windows Event Log. 
+ <a href="test-markdown_b45ee518-82b1-426c-b772-1e6c0fde455e.html#_Flat_File_Trace" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">FlatFileTraceListener</a>. This trace listener class writes log entries to a text file.
+ <a href="#_MSMQTraceListener" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">MSMQTraceListener</a>. This trace listener class writes log entries to a message queue.
+ <a href="#_RollingFlatFileTraceListener" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">RollingFlatFileTraceListener</a>. This trace listener class creates a new log file depending on the current log file age and/or size.
+ <a href="#_System.Diagnostics_Trace_Listeners" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">System.Diagnostics Trace Listeners</a>. The System.Diagnostics namespace in the .NET Framework includes trace listener classes such as the Console Trace Listener which you can use with the Logging Application Block.
+ <a href="#_XMLTraceListener" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">XMLTraceListener</a>. This trace listener class is used to output log messages to an XML formatted file. 
+ <a href="#_AsynchronousTraceListenerWrapper" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">AsynchronousTraceListnerWrapper</a>. This trace listener wraps another trace listener to add asynchronous log message writing behavior.
<a name="_FormattedDatabaseTraceListener" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# FormattedDatabaseTraceListener #
The following table lists the properties that you can set when you create a **FormattedDatabaseTraceListener** instance.  
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>database</b></p></td><td><p>An instance of the <b>Microsoft.Practices.EnterpriseLibrary.Data.Database</b> class. This is required.</p></td></tr><tr><td><p><b>writeLogStoredProcName</b></p></td><td><p>The string name of the stored procedure that writes the log entries. The default is <b>WriteLog</b>. This is required.</p><p>Typically, you should use the value <b>WriteLog</b>.</p></td></tr><tr><td><p><b>addCategoryStoredProcName</b></p></td><td><p>The string name of the stored procedure that adds a category. This is required.</p><p>Typically, you should use the value <b>AddCategory</b>.</p></td></tr><tr><td><p><b>formatter</b></p></td><td><p>The formatter to use with this trace listener. This should be an instance of the <b>ILogFormatter</b> type. This is optional.</p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table><a name="_EmailTraceListener" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# EmailTraceListener #
The following table lists the properties that you can set when you create an **EmailTraceListener** instance.   
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>toAddress</b></p></td><td><p>The address where the log entry is sent. This string value is required.</p></td></tr><tr><td><p><b>fromAddress</b></p></td><td><p>The address where the log entry originated. This string value is required.</p></td></tr><tr><td><p><b>subjectLineStarter</b></p></td><td><p>The subject line prefix. This string value is optional.</p></td></tr><tr><td><p><b>subjectLineEnder</b></p></td><td><p>The subject line suffix. This string value is optional.</p></td></tr><tr><td><p><b>smtpServer</b></p></td><td><p>The name or IP address of the SMTP server used to send e-mail messages. This string value is required.</p></td></tr><tr><td><p><b>smtpPort</b></p></td><td><p>The SMTP port that receives e-mail messages. The default is <b>25</b>. This integer value is optional. </p></td></tr><tr><td><p><b>formatter</b></p></td><td><p>The formatter to use with this trace listener. This should be an instance of the <b>ILogFormatter</b> type. This is optional.</p></td></tr><tr><td><p><b>authenticationMode</b></p></td><td><p>One of the email authentication modes defined in the <b>EmailAuthenticationMode</b> enumeration. Possible values are <b>None</b>, <b>WindowsCredentials</b>, or <b>UserNameAndPassword</b>. The default value is <b>None</b>.</p><p>If the value is <b>UserNameAndPassword</b>, you must also specify values for the <b>userName</b> and <b>password</b> properties.</p></td></tr><tr><td><p><b>userName</b></p></td><td><p>User name when authenticating with user name and password. You must provide this string value if the <b>authenticationMode</b> is set to <b>UserNameAndPassword</b>.</p></td></tr><tr><td><p><b>password</b></p></td><td><p>Password when authenticating with user name and password. You must provide this string value if the <b>authenticationMode</b> is set to <b>UserNameAndPassword</b>.</p></td></tr><tr><td><p><b>useSSL</b></p></td><td><p>Specifies if the e-mail trace listener should use SSL when connecting to the mail server. Set to <b>True</b> to use SSL to connect, or <b>False</b> to use an unencrypted connection. The default is <b>False</b></p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table>
<div class="alert" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" src="../local/note.gif" />Note:</th></tr><tr><td>E-mail messages exchanged with a SMTP server could be intercepted while in transit by a malicious user running a network sniffer or monitoring application. You can mitigate this problem by supporting Transport Layer Security or S/Mime with encryption of the e-mail messages.</td></tr></table><p /></div><a name="_FormattedEventLogTraceListener" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# FormattedEventLogTraceListener #
The following table lists the properties that you can set when you create a **FormattedEventLogTraceListener **instance.  
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>source</b></p></td><td><p>The source name to use when writing to the log. This string name is required.</p></td></tr><tr><td><p><b>log</b></p></td><td><p>The name of the event log where entries are written. This string name is optional. The default value is <b>Application</b>.</p></td></tr><tr><td><p><b>machineName</b></p></td><td><p>The name of the computer on which to write log entries. This string name is optional. The default value is “<b>.</b>” which uses the current machine name.</p></td></tr><tr><td><p><b>formatter</b></p></td><td><p>The formatter to use with this trace listener. This should be an instance of the <b>ILogFormatter</b> type. This is optional.</p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table>


# FlatFileTraceListener #
The following table lists the properties that you can set when you create a **FlatFileTraceListener **instance.  
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>fileName</b></p></td><td><p>The string name of the file where entries are written. The default name is <b>trace.log</b>. This is a required value. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%.</p></td></tr><tr><td><p><b>header</b></p></td><td><p>Additional information contained in the file header. The default string is "----------------------------------------." This is optional.</p></td></tr><tr><td><p><b>footer</b></p></td><td><p>Additional information contained in the file footer. The default string is "----------------------------------------." This is optional.</p></td></tr><tr><td><p><b>formatter</b></p></td><td><p>The formatter to use with this trace listener. This should be an instance of the <b>ILogFormatter</b> type. This is optional.</p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table>
<div class="alert" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" src="../local/note.gif" />Note:</th></tr><tr><td>If the file you specify for the **Flat File** **TraceListener** is read-only, the trace listener does not write the data to the file and no exception occurs. Make sure that the file attributes are set to **read/write**.

When you use the **FlatFileTraceListener** class to write log information to a file, the block locks the file until the application closes. It is possible to open and read the file, but you cannot move or delete the log file until you close the application.</td></tr></table><p /></div>
<a name="_MSMQTraceListener" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# MSMQTraceListener #
The following table lists the properties that you can set when you create an **MSMQTraceListener **instance.  
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>queuePath</b></p></td><td><p>The path to the queue that the <b>Msmq TraceListener</b> instance uses. This attribute is a message queuing path, and it applies to the <b>MsmqTraceListener</b> class. The default is <b>.\Private$\myQueue</b>. This string is required.</p></td></tr><tr><td><p><b>formatter</b></p></td><td><p>The formatter to use with this trace listener. This should be an instance of the <b>ILogFormatter</b> type. This is optional.</p></td></tr><tr><td><p><b>messagePriority</b></p></td><td><p>Sets the priority of a log entry. This determines its priority while the log entry is in transit and when it is inserted into its destination queue. The enumeration <b>MessagePriority</b> defines the possible values: <b>AboveNormal</b>, <b>High</b>, <b>Highest</b>, <b>Low</b>, <b>Lowest</b>, <b>Normal</b>, <b>VeryHigh</b>, and <b>VeryLow</b>. It applies to the <b>MsmqTraceListener</b> class. This is required.</p></td></tr><tr><td><p><b>recoverable</b></p></td><td><p>This Boolean value specifies whether the log entry is guaranteed to be delivered if there is a computer failure or network problem. This is required.</p></td></tr><tr><td><p><b>timeToReachQueue</b></p></td><td><p>This timespan defines the maximum time for the log entry to reach the queue. This is required.</p></td></tr><tr><td><p><b>timeToBeReceived</b></p></td><td><p>This timespan defines the total time for a log entry to be received by the destination queue. This is required.</p></td></tr><tr><td><p><b>useAuthentication</b></p></td><td><p>This Boolean value specifies whether the message was (or must be) authenticated before being sent. This is required.</p></td></tr><tr><td><p><b>useDeadLetterQueue</b></p></td><td><p>This Boolean value specifies whether a copy of a message that could not be delivered should be sent to a dead-letter queue. This is required.</p></td></tr><tr><td><p><b>useEncryption</b></p></td><td><p>This Boolean value specifies whether to make the message private. This is required.</p></td></tr><tr><td><p><b>transactionType</b></p></td><td><p>The type of a Message Queuing transaction. The <b>MessageQueueTransactionType</b> enumeration defines the possible values: <b>Automatic</b>, <b>None</b>, and <b>Single</b>. It applies to the <b>MsmqTraceListener</b> class. This is required.</p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table><a name="_RollingFlatFileTraceListener" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# RollingFlatFileTraceListener #
The following table lists the properties that you can set when you create a **RollingFlatFileTraceListener **instance. This trace listener allows you to control the size and age of a log file.   
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>fileName</b></p></td><td><p>This is the string name of the rolling flat file. This is a required value. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%. If you also set the <b>Max Archived Files</b> property, See the advice on choosing a file name in the following <b>Remarks</b> section. This is required.</p></td></tr><tr><td><p><b>header</b></p></td><td><p>Additional information contained in the file header. This string is required.</p></td></tr><tr><td><p><b>footer</b></p></td><td><p>Additional information contained in the file footer. This string is required.</p></td></tr><tr><td><p><b>formatter</b></p></td><td><p>The formatter to use with this trace listener. This should be an instance of the <b>ILogFormatter</b> type. This is optional.</p></td></tr><tr><td><p><b>rollSizeKB</b></p></td><td><p>This integer value is the maximum size the file can reach, in kilobytes, before it rolls over. If the value is zero, the file will not roll over. This is required.</p></td></tr><tr><td><p><b>timeStampPattern</b></p></td><td><p>This string is the date/time format that is appended to the new file name (see the Remarks section that follows this table). This is required.</p></td></tr><tr><td><p><b>rollFileExistsBehavior</b></p></td><td><p>This property determines what occurs to an existing file when it rolls over. The <b>RollFileExists</b> enumeration defines the possible values. If you select <b>Increment</b>, the application block creates a new file and names it by incrementing the timestamp. If you select <b>Overwrite </b>and do not provide a value for the <b>Timestamp Pattern</b> property, the existing file is overwritten. This is required.</p></td></tr><tr><td><p><b>rollInterval</b></p></td><td><p>This property determines when the log file rolls over. The <b>RollInterval</b> enumeration defines the possible values. You can select <b>None</b> (the default), <b>Midnight</b> (in which case the log will roll over at midnight), <b>Minute</b>, <b>Hour</b>, <b>Day</b>, <b>Month</b>, <b>Week</b>, or <b>Year</b>. This is required.</p></td></tr><tr><td><p><b>maxArchivedFiles</b></p></td><td><p>This integer value defines the maximum number of log files to retain. When set to a positive value, the trace listener will purge old files based on the file creation date when the number exceeds the specified value. See the note in the following <b>Remarks</b> section if you set this property. This is optional.</p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table>

# Remarks #
+ If you set the **maxArchivedFiles** property, this trace listener will delete (purge) files using the file name pattern **[**<i>file-name</i>**] *.**<i>file-extension</i>. Therefore, it will delete all log files for any trace listener that matches this pattern when it purges archived log files. To prevent this, use a value for the **fileName** property that included an additional period. For example, use **[**<i>file-name</i>**] .[**<i>additional-name</i>**].**<i>file-extension</i>.
+ You can control either the size of the file, its age, or both. For example, if you specify in configuration a **rollSizeKB** value of 5 KB and a **rollInterval** value of Day, the file rolls when its size exceeds 5 KB and it also rolls at the end of the day.
+ If you select **Increment** for the **rollFileExistsBehavior**, the application block creates a new file when the existing file rolls over. The file name includes the current timestamp. If a file with this name already exists, the application block adds an integer to the end of the timestamp and increments it until it cannot find a file with that name. For example, assume there is a file named **mylog2007-01-10.log** and the file rolls over while that timestamp is still valid. The Logging Application Block will then look for a file named **mylog2007-01-10.1.log**. If no such file exists, it will use that file name for the new file. If that file also exists, it will then attempt to locate the log with the next sequence number **mylog2007-01-10.2.log**. 
+ If you select **Overwrite** for the **rollFileExistsBehavior**, the application block replaces the existing file with a new file when the current file rolls over. However, if you also set the **timeStampPattern** property, the application block will create a new file with the current time stamp instead of replacing the existing file. If, for some reason, it cannot overwrite the file, it will generate a name using the same process that is used with the **Increment** value.
+ Relative path names resolve to a location that is relative to the <i>AppDomain.CurrentDomain.BaseDirectory</i> directory.
<a name="_System.Diagnostics_Trace_Listeners" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# System.Diagnostics Trace Listeners #
The System.Diagnostics namespace includes a number of trace listener classes that you can use with the Logging Application Block such as: **TextWriterTraceListener**, **XmlWriterListener**, **DelimitedLIstTraceListener**, and **ConsoleTraceListener**. For more information, see the <a href="http://msdn.microsoft.com/en-us/library/15t15zda.aspx" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">Systems.Diagnostics Namespace</a> documentation on MSDN.  
<div class="alert" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" src="../local/note.gif" />Note:</th></tr><tr><td>If you specify a **System Diagnostics** trace listener that writes to a file and that file is read-only, the trace listener does not write the data to the file and no exception occurs. Make sure the file attributes are set to **read/write**.</td></tr></table><p /></div><a name="_XMLTraceListener" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# XMLTraceListener #
The following table lists the properties that you can set when you create an **XMLTraceListener **instance.  
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>fileName</b></p></td><td><p>This is the string name of the file where the trace listener writes the data it extracts from an <b>XmlLogEntry</b> object. This is a required value. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%. </p></td></tr><tr><td><p><b>Filter</b></p></td><td><p>An instance of the <b>EventTypeFilter</b> type that specifies a filter to select the level of message that it will detect. The <b>EventTypeFilter</b> instance is initialized with a value from the <b>SourceLevels</b> enumeration: the possible values are <b>All</b> (the default), <b>Off</b>, <b>Critical</b>, <b>Error</b>, <b>Warning</b>, <b>Information</b>, <b>Verbose</b>, and <b>ActivityTracing</b>. The setting effectively means "the specified level and everything more important." For example, the <b>Warning</b> setting will detect warnings, errors, and critical events. This is optional.</p></td></tr><tr><td><p><b>TraceOutputOptions</b></p></td><td><p>For more information, see <hlink xlink:type="simple" xlink:show="new" xlink:actuate="onRequest" xlink:href="http://msdn.microsoft.com/en-us/library/a10k7w6c.aspx">TraceOptions Enumeration</hlink> on MSDN.</p><p>This is optional.</p></td></tr></table><a name="_AsynchronousTraceListenerWrapper" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a><a name="AsynchronousTraceListnerWrapper" href="#" xmlns:xlink="http://www.w3.org/1999/xlink"><span /></a>

# AsynchronousTraceListenerWrapper #
The following table lists the properties that you can set when you create an **AsynchronousTraceListenerWrapper **instance.  
<table xmlns:xlink="http://www.w3.org/1999/xlink"><tr><th><p>Property or constructor parameter</p></th><th><p>Description</p></th></tr><tr><td><p><b>wrappedTraceListener</b></p></td><td><p>The wrapped trace listener instance. This can be any trace listener supported by the block. </p></td></tr><tr><td><p><b>ownsWrappedTraceListener</b></p></td><td><p>Indicates whether the wrapper is responsible for disposing the wrapped trace listener.</p></td></tr><tr><td><p><b>bufferSize</b></p></td><td><p>An integer value that specifies the buffer size for asynchronous logging. If the buffer overflows, events will be lost. The default value is 30,000.</p></td></tr><tr><td><p><b>maxDegreeOfParallelism</b></p></td><td><p>The maximum degree of parallelism for thread safe listeners. Use <b>null</b> to use the current core count.</p></td></tr><tr><td><p><b>disposeTimeout</b></p></td><td><p>A <b>TimeSpan</b> value that specifies how long to wait for the asynchronous listener to finish processing buffered requests. Use <b>null</b> or <b>Timeout.InfiniteTimeSpan</b> to indicate an infinite timeout. The default value is infinite.</p></td></tr></table>Enqueued requests for non-thread-safe trace listeners are serialized and handled by a single thread, but for thread-safe trace listeners requests will be processed in parallel. By default, the degree of parallelism is equal to the quantity of processors reported by the system, but this default can be overridden. Note this is a maximum, it doesn’t mean that there will be that many threads dedicated to handling a specific listener’s entries. This helps to process the contents of the buffer reducing the risk that the buffer overflows.  


